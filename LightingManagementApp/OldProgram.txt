using System.Device.Spi;
using System.Drawing;
using System.Threading;
using System.Threading.Tasks;
using Iot.Device.Ws28xx;

namespace LEDController
{
    internal static class Program
    {
        private static void Main2()
        {
            // Initial Values
            int ledCount = -1;           // Number of LEDs (set to -1 to force user input)
            MenuId menuId = MenuId.Root;    // Set the menu id to the root menu
            bool isActive = true;            // Set the application to active
            float colorPercentage = 1.0f;     // Set the color percentage to 100%

            // Setup Serial Peripheral Interface (SPI) to communicate with the LED strip
            SpiConnectionSettings settings = new(0, 0)
            {
                ClockFrequency = 2_400_000,
                Mode = SpiMode.Mode0,
                DataBitLength = 8
            };

            // Create the SPI device
            SpiDevice spi = SpiDevice.Create(settings);

            // Create the LED strip object
            Patterns? ledStrip = null;

            // Configure the LED strip
            while (ledCount == -1)
            {
                Console.Write("Enter the Number of LEDs (0 to exit): ");
                string? input = Console.ReadLine();
                if (int.TryParse(input, out ledCount))
                {
                    break;
                }
            }

            if (ledCount == 0)
            {
                return;
            }

            while (true)
            {
                Console.WriteLine("Select the type of LEDs");
                Console.WriteLine("1: WS2812b");
                Console.WriteLine("2: WS2815b");
                Console.WriteLine("3: SK68012");
                Console.WriteLine("0: Exit");
                Console.Write("Type of Strip: ");
                string ledType = Console.ReadLine()!.Trim();

                switch (ledType)
                {
                    case "0":
                        return;

                    case "1":
                        ledStrip = new Patterns(new Ws2812b(spi, ledCount), ledCount);
                        break;

                    case "2":
                        ledStrip = new Patterns(new Ws2815b(spi, ledCount), ledCount);
                        break;

                    case "3":
                        ledStrip = new Patterns(new Sk6812(spi, ledCount), ledCount) { SupportsSeparateWhite = true };
                        break;

                    default:
                        Console.WriteLine("Unsupported selection.");
                        break;
                }

                if (ledStrip != null)
                {
                    break;
                }
            }
            
            // Set Initial state of the LEDs to off
            ledStrip.SwitchOffLEDs();
            
            while (isActive)
            {
                DrawMenu();
            }

            Console.WriteLine("Exit application.");

            void DrawMenu()
            {
                Console.Clear();
                switch (menuId)
                {
                    case MenuId.Root:
                        isActive = DrawMainMenu();
                        break;

                    case MenuId.WhiteLevel:
                        DrawWhiteLevelMenu();
                        break;

                    case MenuId.TheatreChase:
                        DrawTheatreChaseMenu();
                        break;

                    case MenuId.Wipe:
                        DrawWipeMenu();
                        break;
                    
                    case MenuId.Flash:
                        DrawFlashMenu();
                        break;

                    case MenuId.Special:
                        DrawSpecialMenu();
                        break;
                }
            }

            void DrawSpecialMenu()
            {
                Console.WriteLine("1. Knight Rider");
                Console.WriteLine("0: Back");
                Console.Write("Selection: ");

                string? choice = Console.ReadLine();
                switch (choice)
                {
                    case "0":
                        menuId = MenuId.Root;
                        break;

                    case "1":
                        StartKnightRider();
                        break;

                    default:
                        Console.WriteLine("Unknown Selection. Any key to continue.");
                        Console.ReadKey();
                        break;
                }
            }

            void DrawWipeMenu()
            {
                Console.WriteLine("1. Wipe black");
                Console.WriteLine("2. Wipe red");
                Console.WriteLine("3. Wipe green");
                Console.WriteLine("4. Wipe blue");
                Console.WriteLine("5. Wipe yellow");
                Console.WriteLine("6. Wipe turquoise");
                Console.WriteLine("7. Wipe purple");
                Console.WriteLine("8. Wipe cold white");
                if (ledStrip.SupportsSeparateWhite)
                {
                    Console.WriteLine("9: Separate white");
                }

                Console.WriteLine("0: Back");
                Console.Write("Selection: ");

                string? choice = Console.ReadLine();
                switch (choice)
                {
                    case "0":
                        menuId = MenuId.Root;
                        break;

                    case "1":
                        ledStrip.ColorWipe(ledStrip.FilterColor(Color.Black));
                        break;

                    case "2":
                        ledStrip.ColorWipe(ledStrip.FilterColor(Color.Red));
                        break;

                    case "3":
                        ledStrip.ColorWipe(ledStrip.FilterColor(Color.Green));
                        break;

                    case "4":
                        ledStrip.ColorWipe(ledStrip.FilterColor(Color.Blue));
                        break;

                    case "5":
                        ledStrip.ColorWipe(ledStrip.FilterColor(Color.Yellow));
                        break;

                    case "6":
                        ledStrip.ColorWipe(ledStrip.FilterColor(Color.Turquoise));
                        break;

                    case "7":
                        ledStrip.ColorWipe(ledStrip.FilterColor(Color.Purple));
                        break;

                    case "8":
                        ledStrip.ColorWipe(ledStrip.FilterColor(Color.White));
                        break;

                    case "9":
                        ledStrip.ColorWipe(Color.FromArgb(255, 0, 0, 0));
                        break;

                    default:
                        Console.WriteLine("Unknown Selection. Any key to continue.");
                        Console.ReadKey();
                        break;
                }
            }

            void DrawTheatreChaseMenu()
            {
                Console.WriteLine("1: All LED off");
                Console.WriteLine("2: Chase in red");
                Console.WriteLine("3: Chase in green");
                Console.WriteLine("4: Chase in blue");
                Console.WriteLine("5: Christmas Chase");

                if (ledStrip.SupportsSeparateWhite)
                {
                    Console.WriteLine("6: White Chase");
                }

                Console.WriteLine("0: Back");
                Console.Write("Selection: ");
                string? choice = Console.ReadLine();
                switch (choice)
                {
                    case "0":
                        menuId = MenuId.Root;
                        break;

                    case "1":
                        ledStrip.SwitchOffLEDs();
                        break;

                    case "2":
                        StartChase(ledStrip.FilterColor(Color.Red), Color.FromArgb(0, 0, 0, 0));
                        break;

                    case "3":
                        StartChase(ledStrip.FilterColor(Color.Green), Color.FromArgb(0, 0, 0, 0));
                        break;

                    case "4":
                        StartChase(ledStrip.FilterColor(Color.Blue), Color.FromArgb(0, 0, 0, 0));
                        break;

                    case "5":
                        StartChase(ledStrip.FilterColor(Color.Red), ledStrip.FilterColor(Color.Green));
                        break;

                    case "6":
                        StartChase(Color.FromArgb(255, 0, 0, 0), Color.FromArgb(0, 0, 0, 0));
                        break;

                    default:
                        Console.WriteLine("Unknown Selection. Any key to continue.");
                        Console.ReadKey();
                        break;
                }
            }

            bool DrawMainMenu()
            {
                Console.WriteLine("0: Back");
                Console.WriteLine("1: All LED off");
                Console.WriteLine("2: All LED to white (percentage)");
                Console.WriteLine("3: Rainbow");
                Console.WriteLine("4: TheatreChase");
                Console.WriteLine("5: Wipe");
                Console.WriteLine("6: Flash");
                Console.WriteLine("7: Special");

                Console.Write("Selection: ");
                string? choice = Console.ReadLine();
                bool keepActive = true;
                switch (choice)
                {
                    case "0":
                        keepActive = false;
                        break;

                    case "1":
                        ledStrip.SwitchOffLEDs();
                        keepActive = true;
                        break;

                    case "2":
                        keepActive = true;
                        menuId = MenuId.WhiteLevel;
                        break;

                    case "3":
                        StartRainbow();
                        break;

                    case "4":
                        menuId = MenuId.TheatreChase;
                        break;

                    case "5":
                        menuId = MenuId.Wipe;
                        break;

                    case "6":
                        menuId = MenuId.Flash;
                        break;
                    
                    case "7":
                        menuId = MenuId.Special;
                        break;

                    default:
                        Console.WriteLine("Unknown Selection. Any key to continue.");
                        Console.ReadKey();
                        break;
                }

                return keepActive;
            }

            void DrawWhiteLevelMenu()
            {
                Console.WriteLine($"1: Change percentage (currently: {colorPercentage * 100}%)");
                Console.WriteLine("2: LEDs white (RGB)");
                if (ledStrip.SupportsSeparateWhite)
                {
                    Console.WriteLine("3: Separate White");
                }

                Console.WriteLine("0: Back");
                Console.Write("Selection: ");
                string? choice = Console.ReadLine();
                switch (choice)
                {
                    case "0":
                        menuId = MenuId.Root;
                        break;

                    case "1":
                        RequestPercentage();
                        break;

                    case "2":
                        ledStrip.SetWhiteValue(colorPercentage);
                        break;

                    case "3":
                        ledStrip.SetWhiteValue(colorPercentage, true);
                        break;

                    default:
                        Console.WriteLine("Unknown Selection. Any key to continue.");
                        Console.ReadKey();
                        break;
                }
            }

            void DrawFlashMenu()
            {
                Console.WriteLine("0: Back");
                Console.WriteLine("1. Flash Red");
                Console.WriteLine("2. Flash Green");
                Console.WriteLine("3. Flash Blue");
                Console.WriteLine("4. Flash Yellow");
                Console.WriteLine("5. Flash Turquoise");
                Console.WriteLine("6. Flash Purple");
                Console.WriteLine("7. Flash White");
                Console.Write("Selection: ");
                string? choice = Console.ReadLine();
                Console.WriteLine("How many times should the LED flash?");
                int numFlashes = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("Enter a value for the flash delay in milliseconds (default 50):");
                int flashDelay = Convert.ToInt32(Console.ReadLine());
                switch (choice)
                {
                    case "0":
                        menuId = MenuId.Root;
                        break;

                    case "1":
                        StartFlash(ledStrip.FilterColor(Color.Red), numFlashes, flashDelay);
                        break;

                    case "2":
                        StartFlash(ledStrip.FilterColor(Color.Green), numFlashes, flashDelay);
                        break;

                    case "3":
                        StartFlash(ledStrip.FilterColor(Color.Blue), numFlashes, flashDelay);
                        break;

                    case "4":
                        StartFlash(ledStrip.FilterColor(Color.Yellow), numFlashes, flashDelay);
                        break;

                    case "5":
                        StartFlash(ledStrip.FilterColor(Color.Turquoise), numFlashes, flashDelay);
                        break;

                    case "6":
                        StartFlash(ledStrip.FilterColor(Color.Purple), numFlashes, flashDelay);
                        break;

                    case "7":
                        StartFlash(ledStrip.FilterColor(Color.White), numFlashes, flashDelay);
                        break;

                    default:
                        Console.WriteLine("Unknown Selection. Any key to continue.");
                        Console.ReadKey();
                        break;
                }
            }
            
            void RequestPercentage()
            {
                Console.Write("Please enter the percentage between 0 and 100 in in whole numbers:");
                string? percentage = Console.ReadLine();
                if (int.TryParse(percentage, out int parsedValue))
                {
                    if (parsedValue < 0 || parsedValue > 100)
                    {
                        Console.WriteLine("Invalid entry. Value not acceptable.");
                    }
                    else
                    {
                        colorPercentage = parsedValue / 100.0f;
                    }
                }

                Console.WriteLine("Any key to return");
                Console.ReadKey();
            }

            void StartRainbow()
            {
                Console.WriteLine("Any key to stop");
                CancellationTokenSource cancellationTokenSource = new();

                Task rainbowTask = Task.Run(() => ledStrip.Rainbow(cancellationTokenSource.Token), cancellationTokenSource.Token);
                Console.ReadKey();
                cancellationTokenSource.Cancel();
                rainbowTask.Wait(cancellationTokenSource.Token);
                ledStrip.SwitchOffLEDs();
            }

            void StartKnightRider()
            {
                Console.WriteLine("Any key to stop");
                CancellationTokenSource cancellationTokenSource = new();

                Task knightRiderTask = Task.Run(() => ledStrip.KnightRider(cancellationTokenSource.Token), cancellationTokenSource.Token);
                Console.ReadKey();
                cancellationTokenSource.Cancel();
                knightRiderTask.Wait(cancellationTokenSource.Token);
                ledStrip.SwitchOffLEDs();
            }

            void StartChase(Color color, Color blankColor)
            {
                Console.WriteLine("Any key to stop");
                CancellationTokenSource cancellationTokenSource = new();

                Task rainbowTask =
                    Task.Run(() => ledStrip.TheatreChase(color, blankColor, cancellationTokenSource.Token), cancellationTokenSource.Token);
                Console.ReadKey();
                cancellationTokenSource.Cancel();
                rainbowTask.Wait(cancellationTokenSource.Token);
                ledStrip.SwitchOffLEDs();
            }
            
            void StartFlash(Color color, int flashes, int flashDelay)
            {
                Console.WriteLine("Any key to stop");
                CancellationTokenSource cancellationTokenSource = new();

                Task flashTask =
                    Task.Run(() => ledStrip.Flash(color, flashes, flashDelay, cancellationTokenSource.Token), cancellationTokenSource.Token);
                Console.ReadKey();
                cancellationTokenSource.Cancel();
                flashTask.Wait(cancellationTokenSource.Token);
                ledStrip.SwitchOffLEDs();
            }
        }
    }
}